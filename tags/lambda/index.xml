<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lambda on Kellen Frodelius-Fujimoto</title>
    <link>rakenodiax.github.io/tags/lambda/</link>
    <description>Recent content in lambda on Kellen Frodelius-Fujimoto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2020 &lt;a href=&#34;https://kellenfujimoto.com/&#34;&gt;Kellen Frodelius-Fujimoto&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 02 Dec 2018 14:18:59 +0100</lastBuildDate><atom:link href="rakenodiax.github.io/tags/lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dice.rs: Rust on Lambda</title>
      <link>rakenodiax.github.io/posts/dicers-rust-on-lambda/</link>
      <pubDate>Sun, 02 Dec 2018 14:18:59 +0100</pubDate>
      
      <guid>rakenodiax.github.io/posts/dicers-rust-on-lambda/</guid>
      <description>Rust support on AWS Lambda was recently released, which seems like as good an opportunity as any to share some code and the solutions to challenges I encountered along the way â˜º. I&amp;rsquo;ve decided to create a little diceware service, and the lambda-runtime crate provides a great API to make this a breeze.
Setting up the library We&amp;rsquo;re going to generate a basic crate:
$ cargo new dicers --lib &amp;amp;&amp;amp; cd dicers Created library `dicers` project You should see a structure similar to this:</description>
    </item>
    
  </channel>
</rss>
